01111
10000
01111
10001
10010
00000
 
01101
01110
01111
10001
10011
01100
01111
00000

01111
10000
01100
01101
01100
01110
00000

01110
01111
01100
01101
01100
01100 12 so


00000010010100101010010100100101000010000100101010010110110001100010110101001010000000100001000010010101001001010000100001001010100101101100011000101101010010100000001010011000100101000010010101001011010100100100000010100101101010010010100001010010010100100000
00000010000100001001010100100101000010000100101010010110110001100010110101001010
 
粉刷匠 
0000001000010010101001011010010000001000010100110001010011000101001100000000110001001010100101101001000000110001000010100101101011010010100100000010000100101010010110100100000010000101001100010100110001010011000000001100010010101001011010010000001000010100110001010011000101001100


stars
00000
01000
01001
01001
01010
01010
01011
01011

00000
01100
01101
01101
01100
01100
01000
01000

00000
01001
01010
01010
01011
01011
01100
01100

00000
01001
01010
01010
01011
01011
01100
01100

00000
01000
01001
01001
01010
01010
01011
01011

00000
01100
01101
01101
01100
01100
01000
01000

        if(index == 0)
        tempctrl = `sed0;
        if(index == 4)
        tempctrl = `sed1;
        if(index == 8)
                tempctrl = `sed2;
                if(index == 12)
                        tempctrl = `sed3;
                        if(index == 16)
                                tempctrl = `sed4;
                                if(index == 20)
                                tempctrl = `sed5;
                                if(index == 24)
                                tempctrl = `sed6;
                                        if(index == 28)
                                                tempctrl = `sed7;
                                                if(index == 32)
                                                        tempctrl = `sed8;
                                                        if(index == 36)
                                                                tempctrl = `sed9;
                                                                if(index == 40)
                                                                tempctrl = `sed0;
                                                                if(index == 44)
                                                                        tempctrl = `sed1;
                                                                        if(index == 48)
                                                                        tempctrl = `sed2;
                                                                        if(index == 52)
                                                                                tempctrl = `sed3;
                                                                                if(index == 56)
                                                                                tempctrl = `sed4;
                                                                                if(index == 60)
                                                                                        tempctrl = `sed5;
                                                                                        if(index == 64)
                                                                                        tempctrl = `sed6;


module segmusic1(
input [4:0] song,
output seg_out,
output reg [7:0] seg_ctrl
    );
    assign seg_out = 1'b1;
    always@* begin
    case(song) 
      5'b10001: seg_ctrl = 8'b1110_1110; //R  //8'b {a,b,c,d,e,f,g,dot}
      5'b10010: seg_ctrl = 8'b1011_0110;//S   //8'b {a,b,c,d,e,f,g,dot}
      5'b10100: seg_ctrl = 8'b1011_0110; //S  //8'b {a,b,c,d,e,f,g,dot}
      default: seg_ctrl = 8'b1111_1100; 
    endcase
    end
endmodule

module segmusic2(
input [4:0] song,
output seg_out,
output reg [7:0] seg_ctrl
    );
    assign seg_out = 1'b1;
    always@* begin
    case(song) 
      5'b10001: seg_ctrl = 8'b0010_0000; // i  //8'b {a,b,c,d,e,f,g,dot} 1
      5'b10010: seg_ctrl = 8'b0011_1100;//o  //8'b {a,b,c,d,e,f,g,dot} 2
      5'b10100: seg_ctrl = 8'b0001_1110;//t   //8'b {a,b,c,d,e,f,g,dot} 3
      default: seg_ctrl = 8'b1111_1100; // 0
    endcase
    end
endmodule

module segmusic3(
input [4:0] song,
output seg_out,
output reg [7:0] seg_ctrl
    );
    assign seg_out = 1'b1;
    always@* begin
    case(song) 
      5'b10001: seg_ctrl = 8'b0010_1010; //n  //8'b {a,b,c,d,e,f,g,dot}
      5'b10010: seg_ctrl = 8'b0010_1010; //n //8'b {a,b,c,d,e,f,g,dot}
      5'b10100: seg_ctrl = 8'b0011_1011; //a  //8'b {a,b,c,d,e,f,g,dot}
      default: seg_ctrl = 8'b1111_1100; 
    endcase
    end
endmodule

module segmusic4(
input [4:0] song,
output seg_out,
output reg [7:0] seg_ctrl
    );
    assign seg_out = 1'b1;
    always@* begin
    case(song) 
      5'b10001: seg_ctrl = 8'b1110_0110; //g  //8'b {a,b,c,d,e,f,g,dot}
      5'b10010: seg_ctrl = 8'b1110_0110;//g   //8'b {a,b,c,d,e,f,g,dot}
      5'b10100: seg_ctrl = 8'b0000_1010;//r   //8'b {a,b,c,d,e,f,g,dot}
      default: seg_ctrl = 8'b1111_1100; 
    endcase
    end
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/12/18 23:10:05
// Design Name: 
// Module Name: showGe
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`include "header.vh"
module showGe(
input [4:0] song,
output seg_out,
output reg [7:0] seg_ctrl
    );
    assign seg_out = 1'b1;
    always@* begin
    case(song) 
      5'b10001: seg_ctrl = `sed1;   //8'b {a,b,c,d,e,f,g,dot}
      5'b10010: seg_ctrl = `sed2;   //8'b {a,b,c,d,e,f,g,dot}
      5'b10100: seg_ctrl = `sed3;
      5'b11000: seg_ctrl = `sed4;
 
      default: seg_ctrl = `sed0; 
    endcase
    end
endmodule


module second(
    input clk,
    input rst_n,
    input clk_bps,
    input wire [4:0] song,
    output reg seg_out,
    output reg [7:0] seg_ctrl
);

    reg [4:0] song_reg; // 中间寄存器，用于存储输入值
//按钮实现歌曲切换还没实现
//但是可以通过resst归零计时了
//2023/12/20
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            seg_ctrl <= `sed0;
            if (song_reg == 5'b10001)
                song_reg <= 5'b10010;
            else if (song_reg == 5'b10010)
                song_reg <= 5'b10100;
            else if (song_reg == 5'b10100)
                song_reg <= 5'b10001;
        end
        else begin
            if (clk_bps)
                case (seg_ctrl)
                    `sed0: seg_ctrl <= `sed1;
                    `sed1: seg_ctrl <= `sed2;
                    `sed2: seg_ctrl <= `sed3;
                    `sed3: seg_ctrl <= `sed4;
                    `sed4: seg_ctrl <= `sed5;
                    `sed5: seg_ctrl <= `sed6;
                    `sed6: seg_ctrl <= `sed7;
                    `sed7: seg_ctrl <= `sed8;
                    `sed8: seg_ctrl <= `sed9;
                    `sed9: seg_ctrl <= `sed0;
                endcase
        end
    end

    assign song = song_reg; // 这里使用中间寄存器的值

endmodule

module segMany(
    input  clk, rst_n,                      // clock, reset
    input [4:0] song,  // data input
    output reg [3:0] selLeft,                          // scan signal
    output [7:0] seg_ctrl             // 7-segment display
    );

    reg clkout;                                // 500Hz clock
    reg [31:0] cnt;                                   // Counter for the 500Hz clock
    reg [1:0]  scan_cnt;                              // Scan signal for the 7-segment display
    parameter  period = 200000;       // Period of the 500Hz clock
    reg [4:0] mus1,mus2,mus3,mus4;
    reg [4:0] seg_in; 
               
always @(*) begin
case(song)
5'b10001: begin mus1 = `mR; mus2 = `mi; mus3 = `mn; mus4 = `mg;end
5'b10010: begin mus1 = `mS;mus2 = `mo; mus3 = `mn; mus4 = `mg;end
5'b10100: begin mus1 = `mS;mus2 = `mt; mus3 = `ma; mus4 = `mr;end
5'b11000: begin mus1 = `md;mus2 = `ma; mus3 = `mu; mus4 = `mb;end
default:begin mus1 = `m0; mus2 = `m0; mus3 = `m0; mus4 = `m0;end
endcase
end

 everySeg shining(.seg_in(seg_in), .seg_out(seg_ctrl));
    // Generate the 500Hz clock
    always @(posedge clk, negedge rst_n) begin
        if (!rst_n) begin
            clkout <= 0;
            cnt <= 0;
        end
        else begin
            if (cnt == (period >> 1) - 1) begin
                clkout <= ~clkout;
                cnt <= 32'd0;
            end else begin
                cnt <= cnt + 1;
            end
        end
    end

    // Generate the scan signal
    always @(posedge clkout, negedge rst_n) begin
        if (!rst_n) begin
            scan_cnt <= 0;
        end else begin
            if (scan_cnt == 2'd3) begin
                scan_cnt <= 0;
            end else begin
                scan_cnt <= scan_cnt + 1;
            end
        end
    end

    // Control the 7-segment display
    always @(*) begin
        case (scan_cnt)
            2'b00: begin 
            selLeft = 4'b1000; 
            seg_in = mus1;
             end
            2'b01: begin
            selLeft = 4'b0100; 
            seg_in = mus2;
           end
            2'b10: begin 
            selLeft = 4'b0010; 
           seg_in = mus3;
            end
            2'b11: begin 
            selLeft= 4'b0001; 
            seg_in = mus4;
             end
            default: selLeft = 4'b0000;
        endcase
    end
endmodule

module everySeg(
   input [4:0] seg_in, 
   output reg [7:0] seg_out
);
always @(*) begin
        case(seg_in)
            `m0: seg_out = `sed0;
            `m1: seg_out = `sed1; 
            `m2: seg_out = `sed2; 
            `m3: seg_out = `sed3; 
            `m4: seg_out = `sed4;
            `m5: seg_out = `sed5;
            `m6: seg_out = `sed6; 
            `m7: seg_out = `sed7;
            `m8: seg_out = `sed8; 
            `m9: seg_out = `sed9; 
            `mR: seg_out = `sedR;
            `mS: seg_out = `sedS;
            `mi: seg_out = `sedi;
            `mo: seg_out = `sedo;
            `mt: seg_out = `sedt;
            `mn: seg_out = `sedn;
            `ma: seg_out = `seda;
            `mg: seg_out = `sedg;
            `mr: seg_out = `sedr;
            `md: seg_out = `sedd;
            `mu: seg_out = `sedu;
            `mb: seg_out = `sedb;
         default: seg_out = 0; 
        endcase
    end
endmodule
